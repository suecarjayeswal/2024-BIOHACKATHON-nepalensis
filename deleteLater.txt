import re

def extract_emotion_and_percentage(text):
    # Define a regular expression pattern to match emotion and percentage
    pattern = r"([a-zA-Z]+)\s\((\d+(\.\d+)?)%\)"
    
    # Search for the pattern in the text
    match = re.search(pattern, text)
    
    if match:
        emotion = match.group(1)  # Extract emotion (e.g., 'sad')
        percentage = float(match.group(2))  # Extract percentage and convert to float
        return emotion, percentage
    else:
        return None, None  # Return None if no match is found

# Example usage
text = 'sad (45.1%)'
emotion, percentage = extract_emotion_and_percentage(text)

print(f"Emotion: {emotion}, Percentage: {percentage}")

node_data = {f"{a}":[] for a in range(5)}
print(node_data)
for frame in data:
    detections = frame['detections']
    node_data_temp = {f"{a}":[] for a in range(5)}
    for node in detections:
        emotion, perc = extract_emotion_and_percentage(node['emotion'])
        multiplier = 1
        if emotion.find('sad')>-1: multiplier = -1
        if emotion.find('angry')>-1: multiplier = -1.5
        perc = float(perc)*multiplier
        node_data_temp[str(node['node_unique_id'])].append(perc)
    for node in node_data_temp.keys():
        node_perc_values = node_data_temp[node]
        length = len(node_perc_values)
        perc = sum(node_perc_values)/length if length>0 else 0
        node_data[node].append(perc)
node_data
import pandas as pd
df = pd.DataFrame(node_data)
df.to_csv('node_data.csv',header=['node_0','node_1','node_2','node_3','node_4',])

#### the above code extracts the influenced_rate of node in each frame and save them to a file

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load data from CSV (replace this with the actual file path)
df = pd.read_csv('node_data.csv', header=0)

# Function to calculate RSI for each node
def calculate_rsi(df, period=50):
    delta = df.diff()  # Calculate price change between consecutive periods
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()  # Average gain
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()  # Average loss
    
    rs = gain / loss  # Relative Strength
    rsi = 100 - (100 / (1 + rs))  # RSI formula
    return rsi

# Calculate RSI for each node
rsi = calculate_rsi(df)

# Plot RSI for each node
plt.figure(figsize=(10, 8))
for i in range(df.shape[1]):
    plt.subplot(df.shape[1], 1, i+1)
    plt.plot(df.index, rsi.iloc[:, i], label=f'RSI Node_{i}')
    plt.axhline(70, color='red', linestyle='--', label='Threshold (70)')
    plt.axhline(30, color='green', linestyle='--', label='Oversold (30)')
    plt.title(f'Relative Strength Index for Node_{i}')
    plt.legend()

plt.tight_layout()
plt.show()

#### the above code calculate the relative strength index of each node.

now i want you to write me code for flagging_logic.py which will extract influenced_rate, save to a file, calculate the relatiave strength index of given node, and code to return those values, or save to a file

